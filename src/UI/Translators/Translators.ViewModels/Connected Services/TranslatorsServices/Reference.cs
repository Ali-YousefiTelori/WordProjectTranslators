// AUTO GENERATED
//     This code was generated by signalgo add refenreces.
//     Runtime Version : 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     to download signalgo vsix for visual studio go https://marketplace.visualstudio.com/items?itemName=AliVisualStudio.SignalGoExtension
//     support and use signalgo go https://github.com/SignalGo/SignalGo-full-net
// AUTO GENERATED
using SignalGo.Shared.DataTypes;
using System.Threading.Tasks;
using SignalGo.Shared.Models;
using TranslatorsServices.Interfaces;
using TranslatorsServices.ServerServices;
using TranslatorsServices.HttpServices;
using TranslatorsServices.ClientServices;
using System;
namespace TranslatorsServices.Interfaces
{

    public partial interface IChapterServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId);
    }
    public partial interface IChapterServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId);
    }
    [ServiceContract("chapterserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IChapterService: IChapterServiceAsync, IChapterServiceSync
    {
    }
    public partial interface IPageServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId);
    }
    public partial interface IPageServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId);
    }
    [ServiceContract("pageserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IPageService: IPageServiceAsync, IPageServiceSync
    {
    }
    public partial interface IBookServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories();
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks();
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId);
    }
    public partial interface IBookServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync();
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync();
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId);
    }
    [ServiceContract("bookserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IBookService: IBookServiceAsync, IBookServiceSync
    {
    }
}

namespace TranslatorsServices.ServerServices
{
    [ServiceContract("chapterserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ChapterService : IChapterService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ChapterService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(CurrentProvider, ServiceName,"FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(CurrentProvider, ServiceName,"FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(CurrentProvider, ServiceName,"GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(CurrentProvider, ServiceName,"GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
        }
    }
    [ServiceContract("pageserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class PageService : IPageService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public PageService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
    }
    [ServiceContract("bookserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class BookService : IBookService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public BookService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(CurrentProvider, ServiceName,"GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(CurrentProvider, ServiceName,"GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
        }
    }
}

namespace TranslatorsServices.StreamServices
{
}

namespace TranslatorsServices.OneWayServices
{
}

namespace TranslatorsServices.HttpServices
{
    public partial class BookService : IBookService
    {
        public BookService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static BookService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
    }
    public partial class PageService : IPageService
    {
        public PageService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static PageService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
    }
    public partial class ChapterService : IChapterService
    {
        public ChapterService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ChapterService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(result.Data);
        }
    }
}

namespace TranslatorsServices.ClientServices
{
}

namespace Translators.Contracts.Common
{
    public partial class MessageContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private bool _IsSuccess;
        public bool IsSuccess
        {
                get
                {
                        return _IsSuccess;
                }
                set
                {
                        _IsSuccess = value;
                        OnPropertyChanged(nameof(IsSuccess));
                }
        }

        private global::Translators.Contracts.Common.ErrorContract _Error;
        public global::Translators.Contracts.Common.ErrorContract Error
        {
                get
                {
                        return _Error;
                }
                set
                {
                        _Error = value;
                        OnPropertyChanged(nameof(Error));
                }
        }


    }

    public partial class MessageContract<T> : global::Translators.Contracts.Common.MessageContract
    {
        private T _Result;
        public T Result
        {
                get
                {
                        return _Result;
                }
                set
                {
                        _Result = value;
                        OnPropertyChanged(nameof(Result));
                }
        }


    }

    public partial class CategoryContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract> _Books;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract> Books
        {
                get
                {
                        return _Books;
                }
                set
                {
                        _Books = value;
                        OnPropertyChanged(nameof(Books));
                }
        }


    }

    public partial class BookContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }

        private long _CategoryId;
        public long CategoryId
        {
                get
                {
                        return _CategoryId;
                }
                set
                {
                        _CategoryId = value;
                        OnPropertyChanged(nameof(CategoryId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract> _Catalogs;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract> Catalogs
        {
                get
                {
                        return _Catalogs;
                }
                set
                {
                        _Catalogs = value;
                        OnPropertyChanged(nameof(Catalogs));
                }
        }


    }

    public partial class PageContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private long _Number;
        public long Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _CatalogNames;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> CatalogNames
        {
                get
                {
                        return _CatalogNames;
                }
                set
                {
                        _CatalogNames = value;
                        OnPropertyChanged(nameof(CatalogNames));
                }
        }

        private long _CatalogId;
        public long CatalogId
        {
                get
                {
                        return _CatalogId;
                }
                set
                {
                        _CatalogId = value;
                        OnPropertyChanged(nameof(CatalogId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ParagraphContract> _Paragraphs;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ParagraphContract> Paragraphs
        {
                get
                {
                        return _Paragraphs;
                }
                set
                {
                        _Paragraphs = value;
                        OnPropertyChanged(nameof(Paragraphs));
                }
        }


    }

    public partial class CatalogContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private int _Number;
        public int Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private int _StartPageNumber;
        public int StartPageNumber
        {
                get
                {
                        return _StartPageNumber;
                }
                set
                {
                        _StartPageNumber = value;
                        OnPropertyChanged(nameof(StartPageNumber));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }

        private long _BookId;
        public long BookId
        {
                get
                {
                        return _BookId;
                }
                set
                {
                        _BookId = value;
                        OnPropertyChanged(nameof(BookId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract> _Pages;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract> Pages
        {
                get
                {
                        return _Pages;
                }
                set
                {
                        _Pages = value;
                        OnPropertyChanged(nameof(Pages));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _BookNames;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> BookNames
        {
                get
                {
                        return _BookNames;
                }
                set
                {
                        _BookNames = value;
                        OnPropertyChanged(nameof(BookNames));
                }
        }


    }

    public partial class ErrorContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Message;
        public string Message
        {
                get
                {
                        return _Message;
                }
                set
                {
                        _Message = value;
                        OnPropertyChanged(nameof(Message));
                }
        }

        private string _StackTrace;
        public string StackTrace
        {
                get
                {
                        return _StackTrace;
                }
                set
                {
                        _StackTrace = value;
                        OnPropertyChanged(nameof(StackTrace));
                }
        }


    }

    public partial class ValueContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private bool _IsMain;
        public bool IsMain
        {
                get
                {
                        return _IsMain;
                }
                set
                {
                        _IsMain = value;
                        OnPropertyChanged(nameof(IsMain));
                }
        }

        private string _Value;
        public string Value
        {
                get
                {
                        return _Value;
                }
                set
                {
                        _Value = value;
                        OnPropertyChanged(nameof(Value));
                }
        }

        private long _LanguageId;
        public long LanguageId
        {
                get
                {
                        return _LanguageId;
                }
                set
                {
                        _LanguageId = value;
                        OnPropertyChanged(nameof(LanguageId));
                }
        }

        private global::Translators.Contracts.Common.LanguageContract _Language;
        public global::Translators.Contracts.Common.LanguageContract Language
        {
                get
                {
                        return _Language;
                }
                set
                {
                        _Language = value;
                        OnPropertyChanged(nameof(Language));
                }
        }

        private long? _TranslatorId;
        public long? TranslatorId
        {
                get
                {
                        return _TranslatorId;
                }
                set
                {
                        _TranslatorId = value;
                        OnPropertyChanged(nameof(TranslatorId));
                }
        }

        private global::Translators.Contracts.Common.TranslatorContract _Translator;
        public global::Translators.Contracts.Common.TranslatorContract Translator
        {
                get
                {
                        return _Translator;
                }
                set
                {
                        _Translator = value;
                        OnPropertyChanged(nameof(Translator));
                }
        }


    }

    public partial class ParagraphContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private long _Number;
        public long Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private string _AnotherValue;
        public string AnotherValue
        {
                get
                {
                        return _AnotherValue;
                }
                set
                {
                        _AnotherValue = value;
                        OnPropertyChanged(nameof(AnotherValue));
                }
        }

        private long _PageId;
        public long PageId
        {
                get
                {
                        return _PageId;
                }
                set
                {
                        _PageId = value;
                        OnPropertyChanged(nameof(PageId));
                }
        }

        private long _CatalogId;
        public long CatalogId
        {
                get
                {
                        return _CatalogId;
                }
                set
                {
                        _CatalogId = value;
                        OnPropertyChanged(nameof(CatalogId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordContract> _Words;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordContract> Words
        {
                get
                {
                        return _Words;
                }
                set
                {
                        _Words = value;
                        OnPropertyChanged(nameof(Words));
                }
        }


    }

    public partial class LanguageContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Name;
        public string Name
        {
                get
                {
                        return _Name;
                }
                set
                {
                        _Name = value;
                        OnPropertyChanged(nameof(Name));
                }
        }

        private string _Code;
        public string Code
        {
                get
                {
                        return _Code;
                }
                set
                {
                        _Code = value;
                        OnPropertyChanged(nameof(Code));
                }
        }


    }

    public partial class TranslatorContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }


    }

    public partial class WordContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private int _Index;
        public int Index
        {
                get
                {
                        return _Index;
                }
                set
                {
                        _Index = value;
                        OnPropertyChanged(nameof(Index));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Values;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Values
        {
                get
                {
                        return _Values;
                }
                set
                {
                        _Values = value;
                        OnPropertyChanged(nameof(Values));
                }
        }

        private long _ParagraphId;
        public long ParagraphId
        {
                get
                {
                        return _ParagraphId;
                }
                set
                {
                        _ParagraphId = value;
                        OnPropertyChanged(nameof(ParagraphId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordLetterContract> _WordLetters;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordLetterContract> WordLetters
        {
                get
                {
                        return _WordLetters;
                }
                set
                {
                        _WordLetters = value;
                        OnPropertyChanged(nameof(WordLetters));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordRootContract> _WordRoots;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordRootContract> WordRoots
        {
                get
                {
                        return _WordRoots;
                }
                set
                {
                        _WordRoots = value;
                        OnPropertyChanged(nameof(WordRoots));
                }
        }


    }

    public partial class WordLetterContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Char _Value;
        public global::System.Char Value
        {
                get
                {
                        return _Value;
                }
                set
                {
                        _Value = value;
                        OnPropertyChanged(nameof(Value));
                }
        }

        private long _WordId;
        public long WordId
        {
                get
                {
                        return _WordId;
                }
                set
                {
                        _WordId = value;
                        OnPropertyChanged(nameof(WordId));
                }
        }


    }

    public partial class WordRootContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Value;
        public string Value
        {
                get
                {
                        return _Value;
                }
                set
                {
                        _Value = value;
                        OnPropertyChanged(nameof(Value));
                }
        }

        private long _WordId;
        public long WordId
        {
                get
                {
                        return _WordId;
                }
                set
                {
                        _WordId = value;
                        OnPropertyChanged(nameof(WordId));
                }
        }


    }

}

