// AUTO GENERATED
//     This code was generated by signalgo add refenreces.
//     Runtime Version : 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     to download signalgo vsix for visual studio go https://marketplace.visualstudio.com/items?itemName=AliVisualStudio.SignalGoExtension
//     support and use signalgo go https://github.com/SignalGo/SignalGo-full-net
// AUTO GENERATED
using SignalGo.Shared.DataTypes;
using System.Threading.Tasks;
using SignalGo.Shared.Models;
using Translators.Contracts.Common;
using Translators.Contracts.Common.Authentications;
using SignalGo.Shared.Http;
using Translators.Contracts.Requests;
using Translators.Contracts.Responses;
using Translators.Contracts.Common.DataTypes;
using Translators.Contracts.Responses.Pages;
using Translators.Contracts.Requests.Pages;
using TranslatorsServices.Interfaces;
using TranslatorsServices.ServerServices;
using TranslatorsServices.HttpServices;
using TranslatorsServices.ClientServices;
using System;
namespace TranslatorsServices.Interfaces
{

    public partial interface IAuthenticationServiceSync
    {
        global::Translators.Contracts.Common.MessageContract AppInit(global::Translators.Contracts.Requests.AppInitRequestContract appInitRequest);
    }
    public partial interface IAuthenticationServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract> AppInitAsync(global::Translators.Contracts.Requests.AppInitRequestContract appInitRequest);
    }
    [ServiceContract("authentication/v1serverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IAuthenticationService: IAuthenticationServiceAsync, IAuthenticationServiceSync
    {
    }
    public partial interface IApplicationServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract> GetAppVersion(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType);
        global::SignalGo.Shared.Http.ActionResult DownloadLastVersion(string fileName);
    }
    public partial interface IApplicationServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>> GetAppVersionAsync(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType);
        Task<global::SignalGo.Shared.Http.ActionResult> DownloadLastVersionAsync(string fileName);
    }
    [ServiceContract("applicationserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IApplicationService: IApplicationServiceAsync, IApplicationServiceSync
    {
    }
    public partial interface IParagraphServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkGroups();
        global::Translators.Contracts.Common.MessageContract LinkParagraph(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkedParagraphsGroups(long paragraphId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> GetLinkedParagraphs(long groupId);
    }
    public partial interface IParagraphServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkGroupsAsync();
        Task<global::Translators.Contracts.Common.MessageContract> LinkParagraphAsync(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkedParagraphsGroupsAsync(long paragraphId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> GetLinkedParagraphsAsync(long groupId);
    }
    [ServiceContract("paragraphserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IParagraphService: IParagraphServiceAsync, IParagraphServiceSync
    {
    }
    public partial interface IUserReadingServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>> GetUserReadings();
        global::Translators.Contracts.Common.MessageContract SyncUserReadings(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings);
    }
    public partial interface IUserReadingServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>> GetUserReadingsAsync();
        Task<global::Translators.Contracts.Common.MessageContract> SyncUserReadingsAsync(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings);
    }
    [ServiceContract("userreadingserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IUserReadingService: IUserReadingServiceAsync, IUserReadingServiceSync
    {
    }
    public partial interface IHealthServiceSync
    {
        global::Translators.Contracts.Common.MessageContract AddLog(global::Translators.Contracts.Common.LogContract log);
    }
    public partial interface IHealthServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract> AddLogAsync(global::Translators.Contracts.Common.LogContract log);
    }
    [ServiceContract("healthserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IHealthService: IHealthServiceAsync, IHealthServiceSync
    {
    }
    public partial interface IObsoletePageServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId);
        global::Translators.Contracts.Common.MessageContract<long> GetPageNumberByVerseNumber(long verseNumber, long catalogId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPagesByBookId(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> Search(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest);
        global::Translators.Contracts.Common.MessageContract UploadFile(global::SignalGo.Shared.Models.StreamInfo<long> stream);
        global::SignalGo.Shared.Http.ActionResult DownloadFile(long pageId);
        global::SignalGo.Shared.Http.ActionResult GetOfflineCache();
    }
    public partial interface IObsoletePageServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<long>> GetPageNumberByVerseNumberAsync(long verseNumber, long catalogId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPagesByBookIdAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> SearchAsync(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest);
        Task<global::Translators.Contracts.Common.MessageContract> UploadFileAsync(global::SignalGo.Shared.Models.StreamInfo<long> stream);
        Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long pageId);
        Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync();
    }
    [ServiceContract("pageserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IObsoletePageService: IObsoletePageServiceAsync, IObsoletePageServiceSync
    {
    }
    public partial interface IChapterServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId);
        global::SignalGo.Shared.Http.ActionResult GetOfflineCache();
    }
    public partial interface IChapterServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId);
        Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync();
    }
    [ServiceContract("chapterserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IChapterService: IChapterServiceAsync, IChapterServiceSync
    {
    }
    public partial interface IPageServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract> GetPage(global::Translators.Contracts.Requests.Pages.PageRequest request);
    }
    public partial interface IPageServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract>> GetPageAsync(global::Translators.Contracts.Requests.Pages.PageRequest request);
    }
    [ServiceContract("page/v1serverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IPageService: IPageServiceAsync, IPageServiceSync
    {
    }
    public partial interface IBookServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories();
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract> GetCategoryByBookId(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks();
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract> GetBookById(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId);
        global::SignalGo.Shared.Http.ActionResult GetOfflineCache();
    }
    public partial interface IBookServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync();
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>> GetCategoryByBookIdAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync();
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>> GetBookByIdAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId);
        Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync();
    }
    [ServiceContract("bookserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IBookService: IBookServiceAsync, IBookServiceSync
    {
    }
    public partial interface IObsoleteAuthenticationServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Register(string userName);
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Login(global::System.Guid session);
    }
    public partial interface IObsoleteAuthenticationServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> RegisterAsync(string userName);
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> LoginAsync(global::System.Guid session);
    }
    [ServiceContract("authenticationserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IObsoleteAuthenticationService: IObsoleteAuthenticationServiceAsync, IObsoleteAuthenticationServiceSync
    {
    }
    public partial interface IStorageServiceSync
    {
        global::SignalGo.Shared.Http.ActionResult DownloadFile(long fileId, string password);
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract> UploadFile(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file);
    }
    public partial interface IStorageServiceAsync
    {
        Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long fileId, string password);
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>> UploadFileAsync(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file);
    }
    [ServiceContract("storage", ServiceType.HttpService, InstanceType.SingleInstance)]
    public partial interface IStorageService: IStorageServiceAsync, IStorageServiceSync
    {
    }
}

namespace TranslatorsServices.ServerServices
{
    [ServiceContract("authentication/v1serverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class AuthenticationService : IAuthenticationService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public AuthenticationService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract AppInit(global::Translators.Contracts.Requests.AppInitRequestContract appInitRequest)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"AppInit", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(appInitRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(appInitRequest) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> AppInitAsync(global::Translators.Contracts.Requests.AppInitRequestContract appInitRequest)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"AppInit", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(appInitRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(appInitRequest) },
                });
        }
    }
    [ServiceContract("applicationserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ApplicationService : IApplicationService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ApplicationService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract> GetAppVersion(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(CurrentProvider, ServiceName,"GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>> GetAppVersionAsync(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(CurrentProvider, ServiceName,"GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadLastVersion(string fileName)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> DownloadLastVersionAsync(string fileName)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
        }
    }
    [ServiceContract("paragraphserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ParagraphService : IParagraphService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ParagraphService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkGroups()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkGroupsAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract LinkParagraph(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> LinkParagraphAsync(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkedParagraphsGroups(long paragraphId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkedParagraphsGroupsAsync(long paragraphId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> GetLinkedParagraphs(long groupId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> GetLinkedParagraphsAsync(long groupId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
        }
    }
    [ServiceContract("userreadingserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class UserReadingService : IUserReadingService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public UserReadingService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>> GetUserReadings()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(CurrentProvider, ServiceName,"GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>> GetUserReadingsAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(CurrentProvider, ServiceName,"GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract SyncUserReadings(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> SyncUserReadingsAsync(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
        }
    }
    [ServiceContract("healthserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class HealthService : IHealthService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public HealthService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract AddLog(global::Translators.Contracts.Common.LogContract log)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> AddLogAsync(global::Translators.Contracts.Common.LogContract log)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
        }
    }
    [ServiceContract("pageserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ObsoletePageService : IObsoletePageService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ObsoletePageService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<long> GetPageNumberByVerseNumber(long verseNumber, long catalogId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<long>>(CurrentProvider, ServiceName,"GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<long>> GetPageNumberByVerseNumberAsync(long verseNumber, long catalogId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<long>>(CurrentProvider, ServiceName,"GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPagesByBookId(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPagesByBookIdAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> Search(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> SearchAsync(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract UploadFile(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> UploadFileAsync(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadFile(long pageId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long pageId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
    }
    [ServiceContract("chapterserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ChapterService : IChapterService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ChapterService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(CurrentProvider, ServiceName,"FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(CurrentProvider, ServiceName,"FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(CurrentProvider, ServiceName,"GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(CurrentProvider, ServiceName,"GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
    }
    [ServiceContract("page/v1serverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class PageService : IPageService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public PageService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract> GetPage(global::Translators.Contracts.Requests.Pages.PageRequest request)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(request),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(request) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract>> GetPageAsync(global::Translators.Contracts.Requests.Pages.PageRequest request)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(request),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(request) },
                });
        }
    }
    [ServiceContract("bookserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class BookService : IBookService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public BookService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(CurrentProvider, ServiceName,"GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(CurrentProvider, ServiceName,"GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract> GetCategoryByBookId(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(CurrentProvider, ServiceName,"GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>> GetCategoryByBookIdAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(CurrentProvider, ServiceName,"GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract> GetBookById(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(CurrentProvider, ServiceName,"GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>> GetBookByIdAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(CurrentProvider, ServiceName,"GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
    }
    [ServiceContract("authenticationserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ObsoleteAuthenticationService : IObsoleteAuthenticationService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ObsoleteAuthenticationService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Register(string userName)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> RegisterAsync(string userName)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Login(global::System.Guid session)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> LoginAsync(global::System.Guid session)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
        }
    }
}

namespace TranslatorsServices.StreamServices
{
}

namespace TranslatorsServices.OneWayServices
{
}

namespace TranslatorsServices.HttpServices
{
    public partial class ObsoleteAuthenticationService : IObsoleteAuthenticationService
    {
        public ObsoleteAuthenticationService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ObsoleteAuthenticationService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Register(string userName)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> RegisterAsync(string userName)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Login(global::System.Guid session)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> LoginAsync(global::System.Guid session)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
    }
    public partial class BookService : IBookService
    {
        public BookService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static BookService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract> GetCategoryByBookId(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>> GetCategoryByBookIdAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract> GetBookById(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>> GetBookByIdAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class HealthService : IHealthService
    {
        public HealthService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static HealthService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract AddLog(global::Translators.Contracts.Common.LogContract log)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "health/AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> AddLogAsync(global::Translators.Contracts.Common.LogContract log)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "health/AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
    }
    public partial class UserReadingService : IUserReadingService
    {
        public UserReadingService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static UserReadingService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>> GetUserReadings()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>> GetUserReadingsAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract SyncUserReadings(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> SyncUserReadingsAsync(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
    }
    public partial class StorageService : IStorageService
    {
        public StorageService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static StorageService Current { get; set; }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadFile(long fileId, string password)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileId) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long fileId, string password)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileId) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract> UploadFile(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(data),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(data) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(file),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(file) },
                }, file);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>> UploadFileAsync(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(data),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(data) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(file),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(file) },
                }, file);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>>(result.Data);
        }
    }
    public partial class ObsoletePageService : IObsoletePageService
    {
        public ObsoletePageService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ObsoletePageService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<long> GetPageNumberByVerseNumber(long verseNumber, long catalogId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<long>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<long>> GetPageNumberByVerseNumberAsync(long verseNumber, long catalogId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<long>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPagesByBookId(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPagesByBookIdAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> Search(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> SearchAsync(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract UploadFile(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                }, stream);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> UploadFileAsync(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                }, stream);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadFile(long pageId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long pageId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class ApplicationService : IApplicationService
    {
        public ApplicationService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ApplicationService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract> GetAppVersion(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>> GetAppVersionAsync(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadLastVersion(string fileName)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> DownloadLastVersionAsync(string fileName)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class AuthenticationService : IAuthenticationService
    {
        public AuthenticationService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static AuthenticationService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract AppInit(global::Translators.Contracts.Requests.AppInitRequestContract appInitRequest)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/v1/AppInit", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(appInitRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(appInitRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> AppInitAsync(global::Translators.Contracts.Requests.AppInitRequestContract appInitRequest)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/v1/AppInit", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(appInitRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(appInitRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
    }
    public partial class ParagraphService : IParagraphService
    {
        public ParagraphService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ParagraphService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkGroups()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkGroupsAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract LinkParagraph(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> LinkParagraphAsync(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkedParagraphsGroups(long paragraphId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkedParagraphsGroupsAsync(long paragraphId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> GetLinkedParagraphs(long groupId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> GetLinkedParagraphsAsync(long groupId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
    }
    public partial class ChapterService : IChapterService
    {
        public ChapterService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ChapterService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class PageService : IPageService
    {
        public PageService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static PageService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract> GetPage(global::Translators.Contracts.Requests.Pages.PageRequest request)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/v1/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(request),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(request) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract>> GetPageAsync(global::Translators.Contracts.Requests.Pages.PageRequest request)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/v1/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(request),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(request) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.Pages.PageResponseContract>>(result.Data);
        }
    }
}

namespace TranslatorsServices.ClientServices
{
}

