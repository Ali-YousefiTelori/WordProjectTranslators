// AUTO GENERATED
//     This code was generated by signalgo add refenreces.
//     Runtime Version : 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
//     to download signalgo vsix for visual studio go https://marketplace.visualstudio.com/items?itemName=AliVisualStudio.SignalGoExtension
//     support and use signalgo go https://github.com/SignalGo/SignalGo-full-net
// AUTO GENERATED
using SignalGo.Shared.DataTypes;
using System.Threading.Tasks;
using SignalGo.Shared.Models;
using SignalGo.Shared.Http;
using TranslatorsServices.Interfaces;
using TranslatorsServices.ServerServices;
using TranslatorsServices.HttpServices;
using TranslatorsServices.ClientServices;
using System;
namespace TranslatorsServices.Interfaces
{

    public partial interface IPageServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId);
        global::Translators.Contracts.Common.MessageContract<long> GetPageNumberByVerseNumber(long verseNumber, long catalogId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPagesByBookId(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> Search(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest);
        global::Translators.Contracts.Common.MessageContract UploadFile(global::SignalGo.Shared.Models.StreamInfo<long> stream);
        global::SignalGo.Shared.Http.ActionResult DownloadFile(long pageId);
        global::SignalGo.Shared.Http.ActionResult GetOfflineCache();
    }
    public partial interface IPageServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<long>> GetPageNumberByVerseNumberAsync(long verseNumber, long catalogId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPagesByBookIdAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> SearchAsync(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest);
        Task<global::Translators.Contracts.Common.MessageContract> UploadFileAsync(global::SignalGo.Shared.Models.StreamInfo<long> stream);
        Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long pageId);
        Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync();
    }
    [ServiceContract("pageserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IPageService: IPageServiceAsync, IPageServiceSync
    {
    }
    public partial interface IApplicationServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract> GetAppVersion(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType);
        global::SignalGo.Shared.Http.ActionResult DownloadLastVersion(string fileName);
    }
    public partial interface IApplicationServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>> GetAppVersionAsync(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType);
        Task<global::SignalGo.Shared.Http.ActionResult> DownloadLastVersionAsync(string fileName);
    }
    [ServiceContract("applicationserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IApplicationService: IApplicationServiceAsync, IApplicationServiceSync
    {
    }
    public partial interface IParagraphServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkGroups();
        global::Translators.Contracts.Common.MessageContract LinkParagraph(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkedParagraphsGroups(long paragraphId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> GetLinkedParagraphs(long groupId);
    }
    public partial interface IParagraphServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkGroupsAsync();
        Task<global::Translators.Contracts.Common.MessageContract> LinkParagraphAsync(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkedParagraphsGroupsAsync(long paragraphId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> GetLinkedParagraphsAsync(long groupId);
    }
    [ServiceContract("paragraphserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IParagraphService: IParagraphServiceAsync, IParagraphServiceSync
    {
    }
    public partial interface IHealthServiceSync
    {
        global::Translators.Contracts.Common.MessageContract AddLog(global::Translators.Contracts.Common.LogContract log);
    }
    public partial interface IHealthServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract> AddLogAsync(global::Translators.Contracts.Common.LogContract log);
    }
    [ServiceContract("healthserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IHealthService: IHealthServiceAsync, IHealthServiceSync
    {
    }
    public partial interface IAuthenticationServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Register(string userName);
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Login(global::System.Guid session);
    }
    public partial interface IAuthenticationServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> RegisterAsync(string userName);
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> LoginAsync(global::System.Guid session);
    }
    [ServiceContract("authenticationserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IAuthenticationService: IAuthenticationServiceAsync, IAuthenticationServiceSync
    {
    }
    public partial interface IBookServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories();
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract> GetCategoryByBookId(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks();
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract> GetBookById(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId);
        global::SignalGo.Shared.Http.ActionResult GetOfflineCache();
    }
    public partial interface IBookServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync();
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>> GetCategoryByBookIdAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync();
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>> GetBookByIdAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId);
        Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync();
    }
    [ServiceContract("bookserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IBookService: IBookServiceAsync, IBookServiceSync
    {
    }
    public partial interface IChapterServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId);
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId);
        global::SignalGo.Shared.Http.ActionResult GetOfflineCache();
    }
    public partial interface IChapterServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId);
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId);
        Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync();
    }
    [ServiceContract("chapterserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IChapterService: IChapterServiceAsync, IChapterServiceSync
    {
    }
    public partial interface IUserReadingServiceSync
    {
        global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>> GetUserReadings();
        global::Translators.Contracts.Common.MessageContract SyncUserReadings(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings);
    }
    public partial interface IUserReadingServiceAsync
    {
        Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>> GetUserReadingsAsync();
        Task<global::Translators.Contracts.Common.MessageContract> SyncUserReadingsAsync(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings);
    }
    [ServiceContract("userreadingserverservice", ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial interface IUserReadingService: IUserReadingServiceAsync, IUserReadingServiceSync
    {
    }
    public partial interface IStorageServiceSync
    {
        global::SignalGo.Shared.Http.ActionResult DownloadFile(long fileId, string password);
        global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract> UploadFile(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file);
    }
    public partial interface IStorageServiceAsync
    {
        Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long fileId, string password);
        Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>> UploadFileAsync(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file);
    }
    [ServiceContract("storage", ServiceType.HttpService, InstanceType.SingleInstance)]
    public partial interface IStorageService: IStorageServiceAsync, IStorageServiceSync
    {
    }
}

namespace TranslatorsServices.ServerServices
{
    [ServiceContract("pageserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class PageService : IPageService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public PageService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<long> GetPageNumberByVerseNumber(long verseNumber, long catalogId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<long>>(CurrentProvider, ServiceName,"GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<long>> GetPageNumberByVerseNumberAsync(long verseNumber, long catalogId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<long>>(CurrentProvider, ServiceName,"GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPagesByBookId(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPagesByBookIdAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(CurrentProvider, ServiceName,"GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> Search(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> SearchAsync(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract UploadFile(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> UploadFileAsync(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadFile(long pageId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long pageId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
    }
    [ServiceContract("applicationserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ApplicationService : IApplicationService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ApplicationService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract> GetAppVersion(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(CurrentProvider, ServiceName,"GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>> GetAppVersionAsync(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(CurrentProvider, ServiceName,"GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadLastVersion(string fileName)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> DownloadLastVersionAsync(string fileName)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
        }
    }
    [ServiceContract("paragraphserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ParagraphService : IParagraphService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ParagraphService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkGroups()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkGroupsAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract LinkParagraph(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> LinkParagraphAsync(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkedParagraphsGroups(long paragraphId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkedParagraphsGroupsAsync(long paragraphId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> GetLinkedParagraphs(long groupId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> GetLinkedParagraphsAsync(long groupId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(CurrentProvider, ServiceName,"GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
        }
    }
    [ServiceContract("healthserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class HealthService : IHealthService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public HealthService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract AddLog(global::Translators.Contracts.Common.LogContract log)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> AddLogAsync(global::Translators.Contracts.Common.LogContract log)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
        }
    }
    [ServiceContract("authenticationserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class AuthenticationService : IAuthenticationService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public AuthenticationService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Register(string userName)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> RegisterAsync(string userName)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Login(global::System.Guid session)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> LoginAsync(global::System.Guid session)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(CurrentProvider, ServiceName,"Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
        }
    }
    [ServiceContract("bookserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class BookService : IBookService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public BookService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(CurrentProvider, ServiceName,"GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(CurrentProvider, ServiceName,"GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract> GetCategoryByBookId(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(CurrentProvider, ServiceName,"GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>> GetCategoryByBookIdAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(CurrentProvider, ServiceName,"GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract> GetBookById(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(CurrentProvider, ServiceName,"GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>> GetBookByIdAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(CurrentProvider, ServiceName,"GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(CurrentProvider, ServiceName,"FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
    }
    [ServiceContract("chapterserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class ChapterService : IChapterService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public ChapterService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(CurrentProvider, ServiceName,"FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(CurrentProvider, ServiceName,"FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(CurrentProvider, ServiceName,"GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(CurrentProvider, ServiceName,"GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::SignalGo.Shared.Http.ActionResult>(CurrentProvider, ServiceName,"GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
    }
    [ServiceContract("userreadingserverservice",ServiceType.ServerService, InstanceType.SingleInstance)]
    public partial class UserReadingService : IUserReadingService
    {
        private SignalGo.Client.ClientProvider CurrentProvider { get; set; }
        string ServiceName { get; set; }
        public UserReadingService(SignalGo.Client.ClientProvider clientProvider)
        {
            CurrentProvider = clientProvider;
            ServiceName = this.GetType().GetServerServiceName(true);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>> GetUserReadings()
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(CurrentProvider, ServiceName,"GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>> GetUserReadingsAsync()
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(CurrentProvider, ServiceName,"GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
        }
        public virtual global::Translators.Contracts.Common.MessageContract SyncUserReadings(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                return  SignalGo.Client.ClientManager.ConnectorExtensions.SendDataSync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
        }
        public virtual Task<global::Translators.Contracts.Common.MessageContract> SyncUserReadingsAsync(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                return SignalGo.Client.ClientManager.ConnectorExtensions.SendDataAsync<global::Translators.Contracts.Common.MessageContract>(CurrentProvider, ServiceName,"SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
        }
    }
}

namespace TranslatorsServices.StreamServices
{
}

namespace TranslatorsServices.OneWayServices
{
}

namespace TranslatorsServices.HttpServices
{
    public partial class AuthenticationService : IAuthenticationService
    {
        public AuthenticationService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static AuthenticationService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Register(string userName)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> RegisterAsync(string userName)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Register", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(userName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(userName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract> Login(global::System.Guid session)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>> LoginAsync(global::System.Guid session)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "authentication/Login", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(session),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(session) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.Authentications.UserContract>>(result.Data);
        }
    }
    public partial class HealthService : IHealthService
    {
        public HealthService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static HealthService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract AddLog(global::Translators.Contracts.Common.LogContract log)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "health/AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> AddLogAsync(global::Translators.Contracts.Common.LogContract log)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "health/AddLog", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(log),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(log) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
    }
    public partial class BookService : IBookService
    {
        public BookService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static BookService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>> GetCategories()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>> GetCategoriesAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategories", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CategoryContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract> GetCategoryByBookId(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>> GetCategoryByBookIdAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetCategoryByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CategoryContract>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> GetBooks()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> GetBooksAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract> GetBookById(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>> GetBookByIdAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetBookById", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.BookContract>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>> FilterBooks(long categoryId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>> FilterBooksAsync(long categoryId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/FilterBooks", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(categoryId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(categoryId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract>>>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "book/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class ChapterService : IChapterService
    {
        public ChapterService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ChapterService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>> FilterChapters(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>> FilterChaptersAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/FilterChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract> GetChapters(long chapterId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>> GetChaptersAsync(long chapterId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetChapters", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(chapterId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(chapterId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.CatalogContract>>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "chapter/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class PageService : IPageService
    {
        public PageService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static PageService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPage(long pageNumber, long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPageAsync(long pageNumber, long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPage", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<long> GetPageNumberByVerseNumber(long verseNumber, long catalogId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<long>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<long>> GetPageNumberByVerseNumberAsync(long verseNumber, long catalogId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPageNumberByVerseNumber", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(verseNumber),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(verseNumber) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(catalogId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(catalogId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<long>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>> GetPagesByBookId(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>> GetPagesByBookIdAsync(long bookId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetPagesByBookId", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(bookId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(bookId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> Search(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> SearchAsync(global::Translators.Contracts.Requests.AdvancedSearchFilterRequestContract advancedSearchFilterRequest)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/Search", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(advancedSearchFilterRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(advancedSearchFilterRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract UploadFile(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                }, stream);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> UploadFileAsync(global::SignalGo.Shared.Models.StreamInfo<long> stream)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(stream),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(stream) },
                }, stream);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadFile(long pageId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long pageId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(pageId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(pageId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult GetOfflineCache()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> GetOfflineCacheAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "page/GetOfflineCache", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class StorageService : IStorageService
    {
        public StorageService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static StorageService Current { get; set; }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadFile(long fileId, string password)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileId) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> DownloadFileAsync(long fileId, string password)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/DownloadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileId) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(password),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(password) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract> UploadFile(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(data),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(data) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(file),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(file) },
                }, file);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>> UploadFileAsync(global::Translators.Contracts.Common.AudioFileContract data, global::SignalGo.Shared.Models.StreamInfo file)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "storage/UploadFile", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(data),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(data) },
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(file),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(file) },
                }, file);
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Common.AudioFileContract>>(result.Data);
        }
    }
    public partial class UserReadingService : IUserReadingService
    {
        public UserReadingService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static UserReadingService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>> GetUserReadings()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>> GetUserReadingsAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/GetUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract SyncUserReadings(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> SyncUserReadingsAsync(global::System.Collections.Generic.List<global::Translators.Contracts.Common.UserReadingContract> readings)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "userreading/SyncUserReadings", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(readings),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(readings) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
    }
    public partial class ApplicationService : IApplicationService
    {
        public ApplicationService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ApplicationService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract> GetAppVersion(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>> GetAppVersionAsync(global::Translators.Contracts.Common.DataTypes.ApplicationType applicationType)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/GetAppVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(applicationType),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(applicationType) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::Translators.Contracts.Responses.AppVersionResponseContract>>(result.Data);
        }
        public virtual global::SignalGo.Shared.Http.ActionResult DownloadLastVersion(string fileName)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
        public virtual async Task<global::SignalGo.Shared.Http.ActionResult> DownloadLastVersionAsync(string fileName)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "application/DownloadLastVersion", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(fileName),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(fileName) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::SignalGo.Shared.Http.ActionResult>(result.Data);
        }
    }
    public partial class ParagraphService : IParagraphService
    {
        public ParagraphService(string serverUrl, SignalGo.Client.IHttpClient httpClient = null)
        {
            _serverUrl = serverUrl;
            _httpClient = httpClient;
            if (_httpClient == null)
                _httpClient = new SignalGo.Client.HttpClient();
        }

        private readonly string _serverUrl = null;
        private SignalGo.Client.IHttpClient _httpClient;
        public SignalGo.Shared.Http.WebHeaderCollection RequestHeaders
        {
            get
            {
                return _httpClient.RequestHeaders;
            }
            set
            {
                _httpClient.RequestHeaders = value;
            }
        }

        public SignalGo.Shared.Http.WebHeaderCollection ResponseHeaders { get; set; }
        public System.Net.HttpStatusCode Status { get; set; }
        public static ParagraphService Current { get; set; }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkGroups()
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkGroupsAsync()
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract LinkParagraph(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract> LinkParagraphAsync(global::Translators.Contracts.Requests.LinkParagraphRequestContract linkParagraphRequest)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/LinkParagraph", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(linkParagraphRequest),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(linkParagraphRequest) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>> GetLinkedParagraphsGroups(long paragraphId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>> GetLinkedParagraphsGroupsAsync(long paragraphId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphsGroups", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(paragraphId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(paragraphId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.LinkGroupContract>>>(result.Data);
        }
        public virtual global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>> GetLinkedParagraphs(long groupId)
        {
                SignalGo.Client.HttpClientResponse result = _httpClient.Post(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
        public virtual async Task<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>> GetLinkedParagraphsAsync(long groupId)
        {
                SignalGo.Client.HttpClientResponse result = await _httpClient.PostAsync(_serverUrl + (_serverUrl.EndsWith("/") ? "" : "/") + "paragraph/GetLinkedParagraphs", new SignalGo.Shared.Models.ParameterInfo[]
                {
                         new  SignalGo.Shared.Models.ParameterInfo() { Name = nameof(groupId),Value = SignalGo.Client.ClientSerializationHelper.SerializeObject(groupId) },
                });
                ResponseHeaders = result.ResponseHeaders;
                Status = result.Status;
                if (Status == System.Net.HttpStatusCode.InternalServerError)
                        throw new Exception(result.Data);
                return _httpClient.Deserialize<global::Translators.Contracts.Common.MessageContract<global::System.Collections.Generic.List<global::Translators.Contracts.Common.SearchValueContract>>>(result.Data);
        }
    }
}

namespace TranslatorsServices.ClientServices
{
}

namespace Translators.Contracts.Common
{
    public partial class MessageContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private bool _IsSuccess;
        public bool IsSuccess
        {
                get
                {
                        return _IsSuccess;
                }
                set
                {
                        _IsSuccess = value;
                        OnPropertyChanged(nameof(IsSuccess));
                }
        }

        private global::Translators.Contracts.Common.ErrorContract _Error;
        public global::Translators.Contracts.Common.ErrorContract Error
        {
                get
                {
                        return _Error;
                }
                set
                {
                        _Error = value;
                        OnPropertyChanged(nameof(Error));
                }
        }


    }

    public partial class MessageContract<T> : global::Translators.Contracts.Common.MessageContract
    {
        private T _Result;
        public T Result
        {
                get
                {
                        return _Result;
                }
                set
                {
                        _Result = value;
                        OnPropertyChanged(nameof(Result));
                }
        }


    }

    public partial class LogContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _LogTrace;
        public string LogTrace
        {
                get
                {
                        return _LogTrace;
                }
                set
                {
                        _LogTrace = value;
                        OnPropertyChanged(nameof(LogTrace));
                }
        }

        private int _AppVersion;
        public int AppVersion
        {
                get
                {
                        return _AppVersion;
                }
                set
                {
                        _AppVersion = value;
                        OnPropertyChanged(nameof(AppVersion));
                }
        }

        private string _Session;
        public string Session
        {
                get
                {
                        return _Session;
                }
                set
                {
                        _Session = value;
                        OnPropertyChanged(nameof(Session));
                }
        }

        private string _DeviceDescription;
        public string DeviceDescription
        {
                get
                {
                        return _DeviceDescription;
                }
                set
                {
                        _DeviceDescription = value;
                        OnPropertyChanged(nameof(DeviceDescription));
                }
        }


    }

    public partial class CategoryContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract> _Books;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.BookContract> Books
        {
                get
                {
                        return _Books;
                }
                set
                {
                        _Books = value;
                        OnPropertyChanged(nameof(Books));
                }
        }


    }

    public partial class BookContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }

        private long _CategoryId;
        public long CategoryId
        {
                get
                {
                        return _CategoryId;
                }
                set
                {
                        _CategoryId = value;
                        OnPropertyChanged(nameof(CategoryId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract> _Catalogs;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.CatalogContract> Catalogs
        {
                get
                {
                        return _Catalogs;
                }
                set
                {
                        _Catalogs = value;
                        OnPropertyChanged(nameof(Catalogs));
                }
        }


    }

    public partial class PageContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private long _Number;
        public long Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _CatalogNames;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> CatalogNames
        {
                get
                {
                        return _CatalogNames;
                }
                set
                {
                        _CatalogNames = value;
                        OnPropertyChanged(nameof(CatalogNames));
                }
        }

        private long _CatalogId;
        public long CatalogId
        {
                get
                {
                        return _CatalogId;
                }
                set
                {
                        _CatalogId = value;
                        OnPropertyChanged(nameof(CatalogId));
                }
        }

        private long _BookId;
        public long BookId
        {
                get
                {
                        return _BookId;
                }
                set
                {
                        _BookId = value;
                        OnPropertyChanged(nameof(BookId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ParagraphContract> _Paragraphs;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ParagraphContract> Paragraphs
        {
                get
                {
                        return _Paragraphs;
                }
                set
                {
                        _Paragraphs = value;
                        OnPropertyChanged(nameof(Paragraphs));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.AudioFileContract> _AudioFiles;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.AudioFileContract> AudioFiles
        {
                get
                {
                        return _AudioFiles;
                }
                set
                {
                        _AudioFiles = value;
                        OnPropertyChanged(nameof(AudioFiles));
                }
        }


    }

    public partial class SearchValueContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private bool _HasLink;
        public bool HasLink
        {
                get
                {
                        return _HasLink;
                }
                set
                {
                        _HasLink = value;
                        OnPropertyChanged(nameof(HasLink));
                }
        }

        private long _Number;
        public long Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private global::Translators.Contracts.Common.ValueContract _Value;
        public global::Translators.Contracts.Common.ValueContract Value
        {
                get
                {
                        return _Value;
                }
                set
                {
                        _Value = value;
                        OnPropertyChanged(nameof(Value));
                }
        }

        private long _ParagraphId;
        public long ParagraphId
        {
                get
                {
                        return _ParagraphId;
                }
                set
                {
                        _ParagraphId = value;
                        OnPropertyChanged(nameof(ParagraphId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordContract> _ParagraphWords;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordContract> ParagraphWords
        {
                get
                {
                        return _ParagraphWords;
                }
                set
                {
                        _ParagraphWords = value;
                        OnPropertyChanged(nameof(ParagraphWords));
                }
        }

        private long _PageId;
        public long PageId
        {
                get
                {
                        return _PageId;
                }
                set
                {
                        _PageId = value;
                        OnPropertyChanged(nameof(PageId));
                }
        }

        private long _PageNumber;
        public long PageNumber
        {
                get
                {
                        return _PageNumber;
                }
                set
                {
                        _PageNumber = value;
                        OnPropertyChanged(nameof(PageNumber));
                }
        }

        private long _CatalogId;
        public long CatalogId
        {
                get
                {
                        return _CatalogId;
                }
                set
                {
                        _CatalogId = value;
                        OnPropertyChanged(nameof(CatalogId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _CatalogNames;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> CatalogNames
        {
                get
                {
                        return _CatalogNames;
                }
                set
                {
                        _CatalogNames = value;
                        OnPropertyChanged(nameof(CatalogNames));
                }
        }

        private long _BookId;
        public long BookId
        {
                get
                {
                        return _BookId;
                }
                set
                {
                        _BookId = value;
                        OnPropertyChanged(nameof(BookId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _BookNames;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> BookNames
        {
                get
                {
                        return _BookNames;
                }
                set
                {
                        _BookNames = value;
                        OnPropertyChanged(nameof(BookNames));
                }
        }


    }

    public partial class LinkGroupContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Title;
        public string Title
        {
                get
                {
                        return _Title;
                }
                set
                {
                        _Title = value;
                        OnPropertyChanged(nameof(Title));
                }
        }


    }

    public partial class CatalogContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private int _Number;
        public int Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private int _StartPageNumber;
        public int StartPageNumber
        {
                get
                {
                        return _StartPageNumber;
                }
                set
                {
                        _StartPageNumber = value;
                        OnPropertyChanged(nameof(StartPageNumber));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }

        private long _BookId;
        public long BookId
        {
                get
                {
                        return _BookId;
                }
                set
                {
                        _BookId = value;
                        OnPropertyChanged(nameof(BookId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract> _Pages;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.PageContract> Pages
        {
                get
                {
                        return _Pages;
                }
                set
                {
                        _Pages = value;
                        OnPropertyChanged(nameof(Pages));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _BookNames;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> BookNames
        {
                get
                {
                        return _BookNames;
                }
                set
                {
                        _BookNames = value;
                        OnPropertyChanged(nameof(BookNames));
                }
        }


    }

    public partial class FileContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Password;
        public string Password
        {
                get
                {
                        return _Password;
                }
                set
                {
                        _Password = value;
                        OnPropertyChanged(nameof(Password));
                }
        }

        private string _Url;
        public string Url
        {
                get
                {
                        return _Url;
                }
                set
                {
                        _Url = value;
                        OnPropertyChanged(nameof(Url));
                }
        }


    }

    public partial class AudioFileContract : global::Translators.Contracts.Common.FileContract
    {
        private bool _IsMain;
        public bool IsMain
        {
                get
                {
                        return _IsMain;
                }
                set
                {
                        _IsMain = value;
                        OnPropertyChanged(nameof(IsMain));
                }
        }

        private string _FileName;
        public string FileName
        {
                get
                {
                        return _FileName;
                }
                set
                {
                        _FileName = value;
                        OnPropertyChanged(nameof(FileName));
                }
        }

        private long _DurationTicks;
        public long DurationTicks
        {
                get
                {
                        return _DurationTicks;
                }
                set
                {
                        _DurationTicks = value;
                        OnPropertyChanged(nameof(DurationTicks));
                }
        }

        private long? _PageId;
        public long? PageId
        {
                get
                {
                        return _PageId;
                }
                set
                {
                        _PageId = value;
                        OnPropertyChanged(nameof(PageId));
                }
        }

        private long? _LanguageId;
        public long? LanguageId
        {
                get
                {
                        return _LanguageId;
                }
                set
                {
                        _LanguageId = value;
                        OnPropertyChanged(nameof(LanguageId));
                }
        }

        private long? _TranslatorId;
        public long? TranslatorId
        {
                get
                {
                        return _TranslatorId;
                }
                set
                {
                        _TranslatorId = value;
                        OnPropertyChanged(nameof(TranslatorId));
                }
        }

        private long? _ParagraphId;
        public long? ParagraphId
        {
                get
                {
                        return _ParagraphId;
                }
                set
                {
                        _ParagraphId = value;
                        OnPropertyChanged(nameof(ParagraphId));
                }
        }

        private long? _AudioReaderId;
        public long? AudioReaderId
        {
                get
                {
                        return _AudioReaderId;
                }
                set
                {
                        _AudioReaderId = value;
                        OnPropertyChanged(nameof(AudioReaderId));
                }
        }


    }

    public partial class UserReadingContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Name;
        public string Name
        {
                get
                {
                        return _Name;
                }
                set
                {
                        _Name = value;
                        OnPropertyChanged(nameof(Name));
                }
        }

        private string _Title;
        public string Title
        {
                get
                {
                        return _Title;
                }
                set
                {
                        _Title = value;
                        OnPropertyChanged(nameof(Title));
                }
        }

        private long _BookId;
        public long BookId
        {
                get
                {
                        return _BookId;
                }
                set
                {
                        _BookId = value;
                        OnPropertyChanged(nameof(BookId));
                }
        }

        private long _CatalogId;
        public long CatalogId
        {
                get
                {
                        return _CatalogId;
                }
                set
                {
                        _CatalogId = value;
                        OnPropertyChanged(nameof(CatalogId));
                }
        }

        private long _PageId;
        public long PageId
        {
                get
                {
                        return _PageId;
                }
                set
                {
                        _PageId = value;
                        OnPropertyChanged(nameof(PageId));
                }
        }

        private long _CategoryId;
        public long CategoryId
        {
                get
                {
                        return _CategoryId;
                }
                set
                {
                        _CategoryId = value;
                        OnPropertyChanged(nameof(CategoryId));
                }
        }

        private int _StartPageNumber;
        public int StartPageNumber
        {
                get
                {
                        return _StartPageNumber;
                }
                set
                {
                        _StartPageNumber = value;
                        OnPropertyChanged(nameof(StartPageNumber));
                }
        }


    }

    public partial class ErrorContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValidationContract> _Validations;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValidationContract> Validations
        {
                get
                {
                        return _Validations;
                }
                set
                {
                        _Validations = value;
                        OnPropertyChanged(nameof(Validations));
                }
        }

        private global::Translators.Contracts.Common.FailedReasonType _FailedReasonType;
        public global::Translators.Contracts.Common.FailedReasonType FailedReasonType
        {
                get
                {
                        return _FailedReasonType;
                }
                set
                {
                        _FailedReasonType = value;
                        OnPropertyChanged(nameof(FailedReasonType));
                }
        }

        private string _Message;
        public string Message
        {
                get
                {
                        return _Message;
                }
                set
                {
                        _Message = value;
                        OnPropertyChanged(nameof(Message));
                }
        }

        private string _Details;
        public string Details
        {
                get
                {
                        return _Details;
                }
                set
                {
                        _Details = value;
                        OnPropertyChanged(nameof(Details));
                }
        }

        private string _StackTrace;
        public string StackTrace
        {
                get
                {
                        return _StackTrace;
                }
                set
                {
                        _StackTrace = value;
                        OnPropertyChanged(nameof(StackTrace));
                }
        }


    }

    public partial class ValueContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private bool _IsMain;
        public bool IsMain
        {
                get
                {
                        return _IsMain;
                }
                set
                {
                        _IsMain = value;
                        OnPropertyChanged(nameof(IsMain));
                }
        }

        private bool _IsTransliteration;
        public bool IsTransliteration
        {
                get
                {
                        return _IsTransliteration;
                }
                set
                {
                        _IsTransliteration = value;
                        OnPropertyChanged(nameof(IsTransliteration));
                }
        }

        private string _Value;
        public string Value
        {
                get
                {
                        return _Value;
                }
                set
                {
                        _Value = value;
                        OnPropertyChanged(nameof(Value));
                }
        }

        private string _SearchValue;
        public string SearchValue
        {
                get
                {
                        return _SearchValue;
                }
                set
                {
                        _SearchValue = value;
                        OnPropertyChanged(nameof(SearchValue));
                }
        }

        private long _LanguageId;
        public long LanguageId
        {
                get
                {
                        return _LanguageId;
                }
                set
                {
                        _LanguageId = value;
                        OnPropertyChanged(nameof(LanguageId));
                }
        }

        private global::Translators.Contracts.Common.LanguageContract _Language;
        public global::Translators.Contracts.Common.LanguageContract Language
        {
                get
                {
                        return _Language;
                }
                set
                {
                        _Language = value;
                        OnPropertyChanged(nameof(Language));
                }
        }

        private long? _TranslatorId;
        public long? TranslatorId
        {
                get
                {
                        return _TranslatorId;
                }
                set
                {
                        _TranslatorId = value;
                        OnPropertyChanged(nameof(TranslatorId));
                }
        }

        private global::Translators.Contracts.Common.TranslatorContract _Translator;
        public global::Translators.Contracts.Common.TranslatorContract Translator
        {
                get
                {
                        return _Translator;
                }
                set
                {
                        _Translator = value;
                        OnPropertyChanged(nameof(Translator));
                }
        }

        private long? _TranslatorNameId;
        public long? TranslatorNameId
        {
                get
                {
                        return _TranslatorNameId;
                }
                set
                {
                        _TranslatorNameId = value;
                        OnPropertyChanged(nameof(TranslatorNameId));
                }
        }

        private long? _BookNameId;
        public long? BookNameId
        {
                get
                {
                        return _BookNameId;
                }
                set
                {
                        _BookNameId = value;
                        OnPropertyChanged(nameof(BookNameId));
                }
        }

        private long? _CategoryNameId;
        public long? CategoryNameId
        {
                get
                {
                        return _CategoryNameId;
                }
                set
                {
                        _CategoryNameId = value;
                        OnPropertyChanged(nameof(CategoryNameId));
                }
        }

        private long? _CatalogNameId;
        public long? CatalogNameId
        {
                get
                {
                        return _CatalogNameId;
                }
                set
                {
                        _CatalogNameId = value;
                        OnPropertyChanged(nameof(CatalogNameId));
                }
        }

        private long? _WordValueId;
        public long? WordValueId
        {
                get
                {
                        return _WordValueId;
                }
                set
                {
                        _WordValueId = value;
                        OnPropertyChanged(nameof(WordValueId));
                }
        }


    }

    public partial class ParagraphContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private long _Number;
        public long Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private string _AnotherValue;
        public string AnotherValue
        {
                get
                {
                        return _AnotherValue;
                }
                set
                {
                        _AnotherValue = value;
                        OnPropertyChanged(nameof(AnotherValue));
                }
        }

        private bool _HasLink;
        public bool HasLink
        {
                get
                {
                        return _HasLink;
                }
                set
                {
                        _HasLink = value;
                        OnPropertyChanged(nameof(HasLink));
                }
        }

        private long _PageId;
        public long PageId
        {
                get
                {
                        return _PageId;
                }
                set
                {
                        _PageId = value;
                        OnPropertyChanged(nameof(PageId));
                }
        }

        private long _CatalogId;
        public long CatalogId
        {
                get
                {
                        return _CatalogId;
                }
                set
                {
                        _CatalogId = value;
                        OnPropertyChanged(nameof(CatalogId));
                }
        }

        private long _BookId;
        public long BookId
        {
                get
                {
                        return _BookId;
                }
                set
                {
                        _BookId = value;
                        OnPropertyChanged(nameof(BookId));
                }
        }

        private long _PageNumber;
        public long PageNumber
        {
                get
                {
                        return _PageNumber;
                }
                set
                {
                        _PageNumber = value;
                        OnPropertyChanged(nameof(PageNumber));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordContract> _Words;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordContract> Words
        {
                get
                {
                        return _Words;
                }
                set
                {
                        _Words = value;
                        OnPropertyChanged(nameof(Words));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.AudioFileContract> _AudioFiles;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.AudioFileContract> AudioFiles
        {
                get
                {
                        return _AudioFiles;
                }
                set
                {
                        _AudioFiles = value;
                        OnPropertyChanged(nameof(AudioFiles));
                }
        }


    }

    public partial class WordContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private int _Index;
        public int Index
        {
                get
                {
                        return _Index;
                }
                set
                {
                        _Index = value;
                        OnPropertyChanged(nameof(Index));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Values;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Values
        {
                get
                {
                        return _Values;
                }
                set
                {
                        _Values = value;
                        OnPropertyChanged(nameof(Values));
                }
        }

        private long _ParagraphId;
        public long ParagraphId
        {
                get
                {
                        return _ParagraphId;
                }
                set
                {
                        _ParagraphId = value;
                        OnPropertyChanged(nameof(ParagraphId));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordLetterContract> _WordLetters;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordLetterContract> WordLetters
        {
                get
                {
                        return _WordLetters;
                }
                set
                {
                        _WordLetters = value;
                        OnPropertyChanged(nameof(WordLetters));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordRootContract> _WordRoots;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.WordRootContract> WordRoots
        {
                get
                {
                        return _WordRoots;
                }
                set
                {
                        _WordRoots = value;
                        OnPropertyChanged(nameof(WordRoots));
                }
        }


    }

    public partial class ValidationContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Message;
        public string Message
        {
                get
                {
                        return _Message;
                }
                set
                {
                        _Message = value;
                        OnPropertyChanged(nameof(Message));
                }
        }


    }

    public partial class LanguageContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Name;
        public string Name
        {
                get
                {
                        return _Name;
                }
                set
                {
                        _Name = value;
                        OnPropertyChanged(nameof(Name));
                }
        }

        private string _Code;
        public string Code
        {
                get
                {
                        return _Code;
                }
                set
                {
                        _Code = value;
                        OnPropertyChanged(nameof(Code));
                }
        }


    }

    public partial class TranslatorContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> _Names;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.ValueContract> Names
        {
                get
                {
                        return _Names;
                }
                set
                {
                        _Names = value;
                        OnPropertyChanged(nameof(Names));
                }
        }


    }

    public partial class WordLetterContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private global::System.Char _Value;
        public global::System.Char Value
        {
                get
                {
                        return _Value;
                }
                set
                {
                        _Value = value;
                        OnPropertyChanged(nameof(Value));
                }
        }

        private long _WordId;
        public long WordId
        {
                get
                {
                        return _WordId;
                }
                set
                {
                        _WordId = value;
                        OnPropertyChanged(nameof(WordId));
                }
        }


    }

    public partial class WordRootContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _Id;
        public long Id
        {
                get
                {
                        return _Id;
                }
                set
                {
                        _Id = value;
                        OnPropertyChanged(nameof(Id));
                }
        }

        private string _Value;
        public string Value
        {
                get
                {
                        return _Value;
                }
                set
                {
                        _Value = value;
                        OnPropertyChanged(nameof(Value));
                }
        }

        private long _WordId;
        public long WordId
        {
                get
                {
                        return _WordId;
                }
                set
                {
                        _WordId = value;
                        OnPropertyChanged(nameof(WordId));
                }
        }


    }

}

namespace Translators.Contracts.Common.Authentications
{
    public partial class UserContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private long _UserId;
        public long UserId
        {
                get
                {
                        return _UserId;
                }
                set
                {
                        _UserId = value;
                        OnPropertyChanged(nameof(UserId));
                }
        }

        private string _UserName;
        public string UserName
        {
                get
                {
                        return _UserName;
                }
                set
                {
                        _UserName = value;
                        OnPropertyChanged(nameof(UserName));
                }
        }

        private string _LoginCode;
        public string LoginCode
        {
                get
                {
                        return _LoginCode;
                }
                set
                {
                        _LoginCode = value;
                        OnPropertyChanged(nameof(LoginCode));
                }
        }

        private global::System.Collections.Generic.List<global::Translators.Contracts.Common.DataTypes.PermissionType> _Permissions;
        public global::System.Collections.Generic.List<global::Translators.Contracts.Common.DataTypes.PermissionType> Permissions
        {
                get
                {
                        return _Permissions;
                }
                set
                {
                        _Permissions = value;
                        OnPropertyChanged(nameof(Permissions));
                }
        }

        private string _Key;
        public string Key
        {
                get
                {
                        return _Key;
                }
                set
                {
                        _Key = value;
                        OnPropertyChanged(nameof(Key));
                }
        }


    }

}

namespace Translators.Contracts.Requests
{
    public partial class AdvancedSearchFilterRequestContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Search;
        public string Search
        {
                get
                {
                        return _Search;
                }
                set
                {
                        _Search = value;
                        OnPropertyChanged(nameof(Search));
                }
        }

        private global::System.Collections.Generic.List<long> _BookIds;
        public global::System.Collections.Generic.List<long> BookIds
        {
                get
                {
                        return _BookIds;
                }
                set
                {
                        _BookIds = value;
                        OnPropertyChanged(nameof(BookIds));
                }
        }

        private bool _SkipSearchInTranslates;
        public bool SkipSearchInTranslates
        {
                get
                {
                        return _SkipSearchInTranslates;
                }
                set
                {
                        _SkipSearchInTranslates = value;
                        OnPropertyChanged(nameof(SkipSearchInTranslates));
                }
        }

        private bool _SkipSearchInMain;
        public bool SkipSearchInMain
        {
                get
                {
                        return _SkipSearchInMain;
                }
                set
                {
                        _SkipSearchInMain = value;
                        OnPropertyChanged(nameof(SkipSearchInMain));
                }
        }

        private bool _DoFullWordsSearch;
        public bool DoFullWordsSearch
        {
                get
                {
                        return _DoFullWordsSearch;
                }
                set
                {
                        _DoFullWordsSearch = value;
                        OnPropertyChanged(nameof(DoFullWordsSearch));
                }
        }


    }

    public partial class LinkParagraphRequestContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private string _Title;
        public string Title
        {
                get
                {
                        return _Title;
                }
                set
                {
                        _Title = value;
                        OnPropertyChanged(nameof(Title));
                }
        }

        private global::System.Collections.Generic.List<long> _FromParagraphIds;
        public global::System.Collections.Generic.List<long> FromParagraphIds
        {
                get
                {
                        return _FromParagraphIds;
                }
                set
                {
                        _FromParagraphIds = value;
                        OnPropertyChanged(nameof(FromParagraphIds));
                }
        }

        private global::System.Collections.Generic.List<long> _ToParagraphIds;
        public global::System.Collections.Generic.List<long> ToParagraphIds
        {
                get
                {
                        return _ToParagraphIds;
                }
                set
                {
                        _ToParagraphIds = value;
                        OnPropertyChanged(nameof(ToParagraphIds));
                }
        }


    }

}

namespace Translators.Contracts.Responses
{
    public partial class AppVersionResponseContract : global::SignalGo.Shared.Models.NotifyPropertyChangedBase
    {
        private int _Number;
        public int Number
        {
                get
                {
                        return _Number;
                }
                set
                {
                        _Number = value;
                        OnPropertyChanged(nameof(Number));
                }
        }

        private int _ForceUpdateNumber;
        public int ForceUpdateNumber
        {
                get
                {
                        return _ForceUpdateNumber;
                }
                set
                {
                        _ForceUpdateNumber = value;
                        OnPropertyChanged(nameof(ForceUpdateNumber));
                }
        }

        private int _CleanCacheTempNumber;
        public int CleanCacheTempNumber
        {
                get
                {
                        return _CleanCacheTempNumber;
                }
                set
                {
                        _CleanCacheTempNumber = value;
                        OnPropertyChanged(nameof(CleanCacheTempNumber));
                }
        }


    }

}

namespace Translators.Contracts.Common.DataTypes
{
    public enum ApplicationType : byte
    {
        None = 0,
        WPF = 1,
        Android = 2,
        IOS = 3,
        UWP = 4,
    }

    public enum PermissionType : byte
    {
        None = 0,
        EndUser = 1,
        Admin = 2,
        EditLink = 3,
    }

}

namespace Translators.Contracts.Common
{
    public enum FailedReasonType : byte
    {
        None = 0,
        SessionAccessDenied = 1,
        AccessDenied = 2,
        InternalError = 3,
        Dupplicate = 4,
        Empty = 5,
        NotFound = 6,
        ValidationsError = 7,
        StreamError = 8,
    }

}

